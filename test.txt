const x = 1;

var {b, c} = fn2();

varxyz (asdf);

avarb(c);
vard (c);
var x;

    Object.keys(rules).forEach(ruleName => {
      var  ruleRecipe = rules[ruleName];

      var  action = ruleRecipe[0]; // define/extend/override
      var  metaInfo = ruleRecipe[1];
      var  description = ruleRecipe[2];
      var  formals = ruleRecipe[3];
      var  body = self.fromRecipe(ruleRecipe[4]);

      let source;
      if (gDecl.source && metaInfo && metaInfo.sourceInterval) {
        source = gDecl.source.subInterval(
            metaInfo.sourceInterval[0],
            metaInfo.sourceInterval[1] - metaInfo.sourceInterval[0]);
      }
      gDecl[action](ruleName, formals, body, description, source);
    });
    Object.keys(rules).forEach((ruleName) => {
      var  ruleRecipe = rules[ruleName];
    });
    Object.keys(rules).forEach((a, b) => {
      var  ruleRecipe = rules[ruleName];
    });
    Object.keys(rules).forEach(() => {
      var  ruleRecipe = rules[ruleName];
    });
